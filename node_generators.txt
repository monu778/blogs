https://www.guru99.com/node-js-generators-compare-callbacks.html

Generators are function executions that can be suspended and resumed at a later point.
Generators are useful when carrying out concepts such as 'lazy execution'. 
This basically means that by suspending execution and resuming at will, we are able to pull values only when we need to.


Generators have the below 2 key methods

Yield method – The yield method is called in a function to halt the execution of the function at the specific line where the yield method is called.
Next method – This method is called from the main application to resume the execution of a function which has a yield method. 
The execution of the function will continue till the next yield method or till the end of the method.

function* Add(x) {   // creating generator function add *
   yield x + 1;     // the function execution will be halted till we invoke the next() function
   var y = yield(null); // After calling  next() function, the Add() function will resume the execution. When the next statement var y= yield(null) will be executed, the Add() function will again stop executing./
   y = 6
   return x + y;
}

var gen = Add(5);

gen.next();

gen.next(); 

Callbacks vs. generators
Generators are used to solve the problem of what is known as callback hell. Sometimes callback functions become so nested during the development of a Node.js application that it just becomes too complicated to use callback functions.

function Timedelay(ptime, callback) {

setTimeout(function() {
  
    callback("Pausing for " + ptime);
    
  }, time);
}

// Using callback function
Timedelay(1000, function(message) {
  
  console.log(msg);
  Timedelay(2000, function(message) {
    
    console.log(msg);
    Timedelay(3000, function(message) {
      
      console.log(msg);
  })
  })
})
// Using  generators and yield
function* Messages() {
  console,log(yield(Timedelay(1000, function(){})));
  console,log(yield(Timedelay(2000, function(){})));
  console,log(yield(Timedelay(3000, function(){})));
}
