https://www.geeksforgeeks.org/min-cost-path-dp-6/

Given a cost matrix cost[][] and a position (m, n) in cost[][], write a function that returns cost of minimum cost path to
reach (m, n) from (0, 0). Each cell of the matrix represents a cost to traverse through that cell. Total cost of a path to reach (m, n) is sum of all the costs on that path (including both source and destination). You can only traverse down, right and diagonally lower cells from a given cell, i.e., from a given cell (i, j), cells (i+1, j), (i, j+1) and (i+1, j+1) can be traversed. 
You may assume that all costs are positive integers.

var ar = [[1,2,3],[4,8,2],[1,5,3]];


console.log(minCostDyn(ar,2,2))
function minCost(ar,m,n) {
    if(m<0||n<0) {
        return 100;
    } else if(m==0&&n==0) {
        return ar[m][n];
    } else {
        return ar[m][n]+min(minCost(ar,m-1,n-1),minCost(ar,m-1,n),minCost(ar,m,n-1))
    }
}

function minCostDyn(ar,m,n) {
    var tc = []
    for(let i=0;i<3;i++) {
        tc[i] = [];
    }
    tc[0][0] =ar[0][0];
    for(i=1;i<=m;i++) {
        tc[i][0]=tc[i-1][0]+ar[i][0]
    }
    for(j=1;j<=n;j++) {
            tc[0][j]=tc[0][j-1]+ar[0][j]
    }

    for(i=1;i<=m;i++) {
        for(j=1;j<=n;j++) {
            tc[i][j] = min(tc[i-1][j-1],tc[i-1][j],tc[i][j-1])+ar[i][j]
        }
    }
    console.dir(tc)
    return tc[m][n]
}

function min(x,y,z) {
    if(x<=y&& x<=z) {
        return x;
    } else if(y<=x&&y<=z) {
        return y;
    } else {
        return z;
    }
}

